¿Por qué programar en Python?

	Por su comunidad
	Por su sintaxis clara
	La usan: Google, Reddit
	
	- Que es programar: Programar es darle instrucciones al computador para hacer algo que tu quieres. Desde un sitio web a llevar humanos a marte.
	Para lograr construir lo que quieres debe unir piezas básicas del lenguaje y dependiendo de como las unas vas a construir eso que imaginas.
	
¿Qué es la programación?

	Es una secuencia de instrucciones que especifican cómo realizar un cómputo
	
	Todos los programas se componen de 'partes' básicas que se utilizan para crear 'partes ' más complejas.
	
	
Guía de instalación y conceptos básicas

	Python es un lenguaje de programación creado por Guido Van Rossum, con una sintaxis muy limpia, ideado para enseñar a la gente a programar bien. Se trata de un lenguaje interpretado de script.
	
	Ventajas:
		Legible: sintaxis intuitiva y estricta.
		Productivo: ahorra mucho código.
		Portable: para todo sistema operativo.
		Recargado: viene con muchas librerías por defecto.
		
		
Operadores comunes:
	
	Longitud de una cadena, lista, tupla:
	>>> len('key') 
	
	Aplicar una conversión a un conjunto como una lista:
	>>> map(str, [1, 2, 3, 4])
	['1', '2', '3', '4']
	
	Redondear un flotante con X número de decimales:
	>>> round(6.3243, 1)
	6.3
	
	Generar un rango en una lista:
	>>> range(5)
	[0, 1, 2, 3, 4]
	
	Sumar un conjunto:
	>>> sum([1, 2, 4])
	7
	
	Organizar un conjunto:
	>>> sorted([5, 2, 1])
	[1, 2, 5]
	
	
Operadores matemáticos en python

	(+) suma
	(-) resta
	(*) multiplicación
	(/) división
	(//) división de enteros
	(%) operador modulo = lo que sobra de una división (5%4 = 1)
	(**) Potencias
	(>) mayor que
	(<) menor que
	(==) igual
	(>=) mayor igual
	(<=) menor igual 
	
Tipos de datos en python

	Orden de operaciones:
		PEMDAS (Paréntesis, Exponentes, Multiplicación, División, Adición, Sustracción) 
	
-- virtualenv para python 3
	> virtualenv -p python3 venv



Declarar variables y expresiones (clase6.py)
	* Las expresiones se componen de valores conectados por operadores.
	* Cuando la computadora evalúa una expresión, el resultado es otro valor.
	* Los valores pueden guadarse en variables.
	* Las variables se pueden reasignar.

	
	Nombres de variables:
		* Tiene que tener nombres significativos
		* Relacionados con lo que representa la variable
		* No deben ser Keywords (palabras reservadas del lenguaje):


		False	class		finally		is		return
		None	continue	for		lambda		try
		True	def		from		nonlocal	while
		and	del		global		not		with		
		as	elif		if		or		yield	
		assert	else		import		pass
		break	except		in		raise


	El tipo de dato le da el contexto al operador:

	> 'hola' + 'platzi' (concatena los strings)
	> 1 + 2 (3)

	

Definir funciones con python (clase7.py, tur.py)
	
	Funciones
	* Una función es una secuencia de comandos que realizan un cómputo.
	* Para definirla, se usa el keyword 'def', se le asigna un nombre y se define
		la secuencia de comandos.
	* Las funciones son llamadas por su nombre y regresan un resultado.
	* Pueden recibir cero o más parámetros.

	>>> def suma(num1, num2):
		return num1 + num2

	>>> suma(2, 3)


	Para definir donde empieza la ejecución de un programa en python:
	
	>>> if __name__ == '__main__':


Declara variables y expresiones

	• Las expresiones se componen de valores conectados por operadores.
	• Cuando el PC evalúa una expresión, el resultado es otro valor.
	• Los valores pueden guardarse en variables. 
	• Las variables se pueden reasignar. Deben tener un nombre significativo, pero no pueden ser palabras reservadas del lenguaje:
		○ False
		○ None
		○ True
		○ And
		○ As
		○ Assert
		○ Break




Funciones con parámetros (tipo_de_cambio.py)

	Limitantes
		* El nombre de la función no puede empezar con un digito.
		* No puede ser una palabra reservada (keyword).
		* Las variables y las funciones deben tener nombres distintos (la ultima definición es la que gana).

		
		Flujo de ejecución
			* Comienza con la primera declaración de arriba hacia abajo.
			* Cada declaración se ejecuta de izquierda a derecha, siguiendo el orden de 
				operaciones.
			* Cuando una declaración contiene una llamada a una función, el cuerpo de la función
				se ejecuta con las mismas reglas 


Estructuras de condicionales en python

	Condicionales:
		* Una expresión booleana se evalúa como verdadera o falsa (True, False)
		* Los operadores relacionales son:
			== (igual)
			!= (diferente)
			< (menor que)
			> (mayor que)
			<= (menor o igual)
			>= (mayor o igual)
		* Los operadores lógicos son:
			and
			or
			not


Calcular si un número es primo (numeros-primos.py)

Buenas practicas del lenguaje
	
	El Zen de Python:
		En la consola interactiva 
		>>> import this (retorna el zen de python)

		Hermoso es mejor que feo.
		Explícito es mejor que implícito.
	Simple es mejor que complejo.
	Complejo es mejor que complicado.
	Sencillo es mejor que anidado.
	Escaso es mejor que denso.
	La legibilidad cuenta.
	Los casos especiales no son lo suficientemente especiales para romper las reglas.
	Lo práctico le gana a la pureza.
	Los errores no debe pasar en silencio.
	A menos que sean silenciados.
	En cara a la ambigüedad, rechazar la tentación de adivinar.
	Debe haber una - y preferiblemente sólo una - manera obvia de hacerlo.	
	Aunque esa manera puede no ser obvia en un primer momento a menos que seas holandés.
	Ahora es mejor que nunca.
	Aunque “nunca” es a menudo mejor que “ahora mismo”.
	Si la aplicación es difícil de explicar, es una mala idea.
	Si la aplicación es fácil de explicar, puede ser una buena idea.
	Los espacios de nombres son una gran idea ¡hay que hacer más de eso!


Comparación de string y unicode

	Los str son inmutables
	Para modificarla hay que crear un nuevo string

	ASCII vs UNICODE
		* Ambos son codificadores de caracteres
		* ASCII (American standard code for information interchange)
		* UNICODE incluye la mayoria de los alfabetos del mundo

		Python codifica en ASCII por defecto, para cambiarlo por UNICODE debemos colocar 'u' antes del string

		Python 2 = ASCII
		Python 3 = UNICODE


Factorial de un número con recursión (factorial.py)


	def fact(n):
	    pass

	 Factorial de 5 se expresa 5!:
	 	5! = 120

	 	5 * fact(4)
	 		4 * fact(3)
	 			3 * fact(2)
	 				2 * fact(1)
	 					1 * fact(0)
	 						1

   				    	1 * 1   <---- va en esta dirección
    					1
    				2 * 1
    				2
    			3 * 2
    			6
    		4 * 6
    		24
    	5 * 24
    	120


Manejo de strings en python

	* Un string es una secuencia de caracteres.
	* Los caracteres se pueden acceder por su indice (los indices empiezan en cero)


		0	1	2	3	4	5	
		p 	l 	a 	t 	z 	i

	>>> len(string) (retorna el tamaño del string)

	OFF BY ONE (como en excel)

	>>> my_string = 'miguel'
	>>> my_string.upper()
		MIGUEL
	>>> my_string.lower()
		miguel
	>>> my_string.find('i') (retorna la posición de la primera ocurrencia)
		1
	

Separar cadenas de texto en python

	slice 
	>>> string = 'platzi'
	>>> string[1:6:2] (va de dos en dos)
	>>> string[::-1] (imprime platzi al reves)


Ciclos en python con for (for.py)

	Iteración:
		* Las iteraciones permiten realizar la misma secuencia de pasos varias veces.
		* También permite recorrer una secuencia (como un string).
		* Es una de las herramientas clave de cualquier programa.

	For loop
		* Se puede utilizar para recorrer strings.
		* Se necesita el keyword 'in'.
		* Si se quiere salir antes de una iteración se utiliza el keyword 'break'.
		* Si se quiere pasar a la siguiente iteración se utiliza el keyword 'continue'



Diccionarios en python (clase26.py)

	* Un diccionario es un mapa de llaves a valores. Los valores pueden ser de cualquier tipo.
	* Se crea con llaves {} o con el keyword 'dict'
	* Se añaden elementos al diccionario señalando la llave y el valor

	Ejemplo:

	>>> mi_dict = {}
	>>> mi_dict['llave'] = 'valor'

	También se pueden añadir valores al momento de inicalizarlo:

	>>> mi_dict{'llave': 'valor'}


	Iteración en diccionarios:

		* Al iterar un diccionario, de manera predeterminada, se obtendrán las llaves.
		* Es posible también iterar a través de los valores.
		* También se permite obtener las llaves y los valores al mismo tiempo.


		for key in diccionario:      (imprime las llaves)
 		    print(key)


 		for value in diccionario: 	(tambien imprime las llaves)
 		    print(value)


 		for value in diccionario.values():		(este si imprime los valores)
 		    print(value)


 		--- python 2.X

 		for key, value in diccionario.iteritems():
 		    print(key, value)

 		--- python 3.x

 		for key, value in diccionario.items():
 			print(key, value)



Encriptar mensajes usando diccionarios(criptografia.py)

Tuplas en python

	* Las tuplas son una secuencia de valores por enteros (integers).
	* Similares a las listas, con la gran diferencia de que son inmutables.
	* Las tuplas se crean separando los valores con comas.
		- Es practica común encerrar los valores en parentesis
	* Se pueden utilizar para devolver más de un valor en una función o crear
		estructuras de datos ligeras.

	mi_tupla = 1, 2, 3, 4
	mi_tuple = (1, 2, 3, 4)

	Para declarar una tupla de un solo valor:

	>>> mi_tupla = (1,)  # La coma es necesaria o si no lo tomaria como un 'int'


Se repite una letra en un string - programa con tuplas


Ciclos en python con while (aleatorio.py)

	* Similar a un for loop, pero en lugar de recorrer una secuencia, se ejecuta hasta que una condición se convierta en falsa.
	* Se debe tener mucho cuidado de no caer en un infinite loop.

	>>> i = 10
	>>> while i > 0:
			print('Ando en un loop')

			i = 1


 
 Calcular si una palabra es palindromo (palindromo.py)


Introducción a listas en python (average-temps.py)

	* Es una secuencia de elementos
	* Cuando se asigna a una variable, permite agrupar varios elementos en un solo lugar.
	* Se crean con los [] o con la keyword 'list'

	>>> supermercado = ['apio', 'tomate', 'queso']
	>>> temperaturas = [24, 26, 18, 20, 21]
	>>> amigos = list()

	* Las listas son mutables

	>>> supermercado[0] = 'salsa'
	>>> supermercado
		['salsa', 'tomate', 'queso']

	>>> amigos.append('enrique')  (append agrega un elemento al final de la lista)
	>>> amigos
		['enrique']
	>>> amigos.append('miguel')
	>>> amigos
		['enrique', 'miguel']


Operaciones con listas en python
	
	Con las listas se pueden usar solo dos operadores: suma y multiplicación

	>>> amigos2 = ['2', '3']
	>>> am = amigos + amigos2
	>>> am
		['enrique', 'miguel', '2', '3']
	>>> am.sort()
		['2', '3', 'enrique', 'miguel']


	>>> amigos * 2
		['enrique', 'miguel', 'enrique', 'miguel']


	Las lista tambien tiene slices

	>>> amigos[1:] = ['miguel']
	>>> amigos[:1] = ['enrique']


Juego del ahorcado con python (ahorcado.py)
	
	En python las constantes no exiten, para definir una constante hay que escribirla en mayúscula


Qué es una busqueda binaria (binary_search.py)




Uso de sets en python (conjuntos)
 
	Los sets son muy similares a las listas, pero estas no permiten elementos repetidos.

	Cuando trabajamos con sets, podemos realizar las operaciones básicas de conjuntos:
		* Intercepción 
		* Diferencia
		* Unión

	>>> s = set([1, 2, 3])
	>>> t = set([3, 4, 5])
	>>> s.union(t) 					# {1, 2, 3, 4, 5}
	>>> s.intersection(t) 			# {3}
	>>> s.difference(t) 			# {4, 5}


Dictionary comprehension y List comprehension

	Permiten añadir sintactyc sugar
	Python permite crear e inicializar listas y diccionarios con una sintaxis más natural

	List comprehesion: convierte una secuencia existente en una nueva secuencia.

	List comprehesion != Dictionary comprehesion (list retorna list y dictionary un diccionario)

	----- codigo normal -----

	>>> pares = []
	>>> for num in range(1,31):    # range() no incluye el ultimo número
			if num % 2 == 0:
				pares.append(num)
	>>> pares
		[2, 4, 6, 8,.............,30]


	----- list comprehesion ----
	>>> even = [num for num in range(1, 31) if num % 2 == 0]
	>>> even
		[2, 4, 6, 8,.............,30]


	--- codigo normal diccionarios -----
	>>> cuadrados = {}

	>>> for num in range(1, 11):
	    	cuadrados[num] = num**2

	>>> cuadrados
	

	------ dictionary comprehension ------

	>>> squares = {num: num**2 for num in range(1, 11)}
	>>> squares
	num: num**2 (el primer num es la llave y el segundo es el valor)


Manejo de errores en python

	* Cuando se genera un error (throw), si este no es atrapado el programa se detiene
	* Para manejar el error se usan los keywords 'try/except'

		my_string = 'una string'

		try:
			int(my_string)
		except ValueError:
			# manejo del error
		finally:
			# Se ejecuta pase lo que pase


	Ver la jerarquia de errores en python ??????

	try / except / else / finally

	La clausula else se ejecuta si no han ocurrido excepciones y antes de la clausula finally


Errores personalizados (errores.py)
	

Manejo de archivos en python (escribir.py)

	* Python puede leer y escribir archivos con la función 'open'.
	* La función 'open' regresa un objeto archivo (file).
	* Los archivos pueden ser de texto o binarios.
	* Se tiene que especificar el modo en que se maneja el archivo 
		- 'r'  = read
		- 'w'  = write
		- 'a'  = añadir (append)
		- 'r+' = leer y escribir
	* Siempre se debe cerrar el archivo con el metodo 'close'
	* La mejor manera de manipular archivos es con el keyword 'with' que es un manejador de contexto 
		si se usa este 'with' no es necesario cerrar el archivo.


	Lectura de archivos:

		* El objeto archivo tiene dos métodos para leerlo: read, readlines

		>>> with open('file.txt', 'r') as f:
				for line in f:
					print(line)


	Escritura de archivos: (si el archivo no exite python lo crea SI EL ARCHIVO EXISTE LO SOBRE ESCRIBE)

		* Para escribir a un archivo, se utiliza el método 'write'

		>>> with open('file.txt', 'w'):
				for i in range(5):
					print('hello')



Programacion orientada a objetos en python

	Clases y objetos
		* Permite definir tipos propios
		* Permite manejar datos y lógica en un solo contenedor.
		* Las clases son como fabricas (moldes) para crear otros objetos.


		* Los objetos tiene atributos que se pueden definir al momento de inicializar un nuevo objeto o
			directamente en la instancia.
		* Las clases pueden tener variables de clase, variables de instancia y variables locales.
			- variables locales = las que se definen dentro de una función.
			- variables globales = las que se definen fuera de las funciones o del código
			- variable de clase = todos los atributos que comparten todos los objetos de la clase (por lo 
				general todos los carro tiene 4 llantas)
			- variable de instancia = el color de un carro, el atributo de cada objeto en especifico.
		* Aunque python no tiene el concepto de variables privadas integrado al lenguaje, es prática común 
			definirlas con un guión bajo.
		* isinstance = para saber si es instancia de una clase
		  hasattr = si tiene algún atributo


		* Los metodos son como funciones que tiene sentido unicamente en el contexto de una clase.
		* Al igual que las variables privadas, los metodos privados se definen con un guión bajo.
		* La encapsulación (concepto clave de la programación orientada a objetos):
			- Declarar todas las variables y metodos como privados a menos que sea necesario que otra
				parte del programa los acceda.
			- Esconder la complejidad del programa.		
		* Un metodo clave que casi todas las clases deben tener es '__init__'
		* Otro es '__str__'
		* Existen varios tipos de metodos:
			- Estaticos
			- de clase
			- de instancia
			- getters
			- setters


Modelar un objeto en python (main.py, lamp.py)


Decoradores en python (funcion_protegida.py)

	Es una funcion que recibe como parametro otra funcion y que retorna una tercera funcion

	Se usa el simbolo @


Paquetes y modulos
	
	* Un modulo permite agrupar funcionalidades comunes en un solo archivo (un modulo es un archivo .py).
	* Cuando varios modulos agrupan funcionalidades comunes, se agrupan en una carpeta/directorio y son
		paquetes.
	* Python reconoce que un directorio es un paquete porque contiene un archivo '__init__.py'



Entorno virtual en python  (/servidor)

	Paquetes de terceros:
		* PyPi (python package index): repositorio de paquetes de terceros que se pueden utilizar en
			proyectos de python

	
	Ambientes virtuales:
		* Es buena practica crear un ambiente virtual por cada proyecto de python en el que trabaje.
		* Evita conflictos de paquetes en el interprete principal




Que es web scraping?

	Es una herramienta que permite visitar sitios web, analizar su contenido y obtener información.



Implementando web scraping con python (web_scraping/)


Interfaz directorio de contactos (agenda_contactos/contactos-interfaz.py, contactos-implementacion.py )


Persistencia de datos (agenda_contactos/contactos.py , contactos.csv)


Configurando el entorno de desarrollo de Google Cloud (clase45/)
	
	> gcloud init


Python 2 vs Python 3
https://wiki.python.org/moin/Python2orPython3
http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html#raising-exceptions

	* print (en python 3 es una función).
	* unicode esta establecido por defecto.
		2.x  
			>>> a = 'ñaña'
			>>> a
				'\xc3\xb1a\xc3\xb1a' 

		3.x 
			>>> a = 'ñaña'
			>>> a
				'ñaña'

	* division de enteros
		2.x 
			>>> 5 / 2
				2

		3.x
			>>> 5 / 2
				2.5

	* raising exceptions
	* input vs raw_input


Que puedes construir con python

	* Desarrollo web
	* Ciencia de datos
	* Machine learning e Inteligencia artificial
	* Programas de escritorio
	* Lineas de comando
	* Internet de las cosas
	* Web scraping y bots
	* Criptografia
	* Finanzas
	* Biologia computacional
	* Ciencias exactas y academia